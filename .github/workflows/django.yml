name: Django CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
    ATLASSERVER_DJANGO_SECRET_KEY: ${{ secrets.ATLASSERVER_DJANGO_SECRET_KEY }}

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:

    - name: Checkout Code
      uses: actions/checkout@v2.3.4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v2.1.4
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
         ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # - name: Run Tests
    #   run: |
    #     cd atlasserver
    #     ls
    #     echo "SECRET_KEY = '3gy2&d^d59mvspz^ey&+9fvf6sgpob8m2+g6@cp5=^h1!5c5l0'" > atlasserver/settings_secret.py
    #     pwd
    #     python3 manage.py shell -c "from django.core.management.utils import get_random_secret_key; print(f'SECRET_KEY = \'{get_random_secret_key()}\'')" > atlasserver/settings_secret_new.py
    #     mv atlasserver/settings_secret_new.py atlasserver/settings_secret.py
    #     cat atlasserver/settings_secret.py
