"use strict";var jslcdataglobal=new Object,jslabelsglobal=new Object,jslimitsglobal=new Object,api_request_active=!1,fetchcache=[];class TaskPlot extends React.PureComponent{constructor(e){super(e)}componentDidMount(){console.log("activating plot",this.props.taskid);var e=new URL(this.props.taskurl);e.pathname+="resultplotdata.js",e.search="",$.ajax({url:e,cache:!0,dataType:"script"})}componentWillUnmount(){console.log("Unmounting plot for task ",this.props.taskid),delete jslimitsglobal["#plotforcedflux-task-"+this.props.taskid],delete jslcdataglobal["#plotforcedflux-task-"+this.props.taskid],delete jslabelsglobal["#plotforcedflux-task-"+this.props.taskid]}render(){return React.createElement("div",{key:"plot",id:"plotforcedflux-task-"+this.props.taskid,className:"plot",style:{width:"100%",height:"300px"}})}}class Task extends React.Component{constructor(e){super(e),this.state={},this.state.updateTimeElapsed=this.updateTimeElapsed.bind(this),this.state.interval=null,this.state.timeelapsed=-1}deleteTask(){$.ajax({url:this.props.taskdata.url,method:"delete",success:e=>{this.props.fetchData()}})}requestImages(){var e=new URL(this.props.taskdata.url);e.pathname+="requestimages",e.search="",$.ajax({url:e,method:"get",success:e=>{this.props.fetchData()}})}static getDerivedStateFromProps(e,t){if(null!=e.taskdata.starttimestamp&&null==e.taskdata.finishtimestamp){if(null==t.interval){var s=new Date(e.taskdata.starttimestamp).getTime(),a=((new Date).getTime()-s)/1e3;return{interval:setInterval(t.updateTimeElapsed,1e3),timeelapsed:a.toFixed(0)}}}else if(null!=t.interval)return{interval:null};return null}componentDidMount(){if(this.updateTimeElapsed(),newtaskids.includes(this.props.taskdata.id)){var e="#task-"+this.props.taskdata.id;$(e).hide(),$(e).show(700),console.log("new task",this.props.taskdata.id),newtaskids=newtaskids.filter((e=>{this.props.taskdata.id}))}}componentWillUnmount(){clearInterval(this.state.interval)}updateTimeElapsed(){if(null!=this.props.taskdata.starttimestamp&&null==this.props.taskdata.finishtimestamp){var e=new Date(this.props.taskdata.starttimestamp).getTime(),t=((new Date).getTime()-e)/1e3;this.setState({timeelapsed:t.toFixed(0)})}else null!=this.state.interval&&(clearInterval(this.state.interval),this.setState({interval:null}))}shouldComponentUpdate(e,t){return null!=e.taskdata.starttimestamp&&null==e.taskdata.finishtimestamp||JSON.stringify(e)!=JSON.stringify(this.props)}render(){var e=this.props.taskdata,t="none",s="none";null!=e.finishtimestamp?(t="finished",s="Delete"):null!=e.starttimestamp?(t="queued started",s="Cancel"):(t="queued notstarted",s="Cancel"),console.log("Task "+e.id+" rendered");var a=null;e.user_id==user_id&&(a=React.createElement("button",{className:"btn btn-sm btn-danger",onClick:()=>this.deleteTask()},s));var r=[React.createElement("div",{key:"rightside",className:"rightside"},a,React.createElement("img",{src:e.previewimage_url,style:{display:"block",marginTop:"1em",marginLeft:"1em"}}))];if(r.push(React.createElement("div",{key:"tasknum"},React.createElement("a",{key:"tasklink",href:e.url,onClick:t=>{this.props.setSingleTaskView(t,e.id,e.url)}},"Task ",e.id))),e.parent_task_url?r.push(React.createElement("p",{key:"imgrequest"},"Image request for ",React.createElement("a",{key:"parent_task_link",href:e.parent_task_url,onClick:t=>{this.props.setSingleTaskView(t,e.parent_task_id,e.parent_task_url)}},"Task ",e.parent_task_id))):e.parent_task_id&&r.push(React.createElement("p",{key:"imgrequest"},"Image request for Task ",e.parent_task_id," (deleted)")),e.parent_task_id){var l=e.use_reduced?"reduced":"difference";r.push(React.createElement("p",{key:"imgrequestnote"},"Up to the first 500 ",l," images will be retrieved. The image request and download link may expire after one week."))}if(e.user_id!=user_id&&r.push(React.createElement("div",{key:"user"},"User: ",e.username)),null!=e.comment&&""!=e.comment&&r.push(React.createElement("div",{key:"comment"},"Comment: ",React.createElement("b",null,e.comment))),null!=e.mpc_name?r.push(React.createElement("div",{key:"target"},"MPC Object: ",e.mpc_name)):r.push(React.createElement("div",{key:"target"},"RA Dec: ",e.ra," ",e.dec)),r.push(React.createElement("div",{key:"imgtype"},"Images: ",e.use_reduced?"Reduced":"Difference")),null!=e.mjd_min||null!=e.mjd_max){var i=null!=e.mjd_min?e.mjd_min:"0",n=null!=e.mjd_max?e.mjd_max:"∞";r.push(React.createElement("div",{key:"mjdrange"},"MJD range: [",i,", ",n,"]"))}return r.push(React.createElement("div",{key:"queuetime"},"Queued at ",new Date(e.timestamp).toLocaleString())),null!=e.finishtimestamp?(r.push(React.createElement("div",{key:"status"},"Finished at ",new Date(e.finishtimestamp).toLocaleString())),null!=e.error_msg?r.push(React.createElement("p",{key:"error_msg",style:{color:"black",fontWeight:"bold",marginTop:"1em"}},"Error: ",e.error_msg)):("FP"==e.request_type&&(r.push(React.createElement("a",{key:"datalink",className:"results btn btn-info getdata",href:e.result_url,target:"_blank"},"Data")),r.push(React.createElement("a",{key:"pdflink",className:"results btn btn-info getpdf",href:e.pdfplot_url,target:"_blank"},"PDF"))),"IMGZIP"==e.request_type?null!=e.result_imagezip_url&&r.push(React.createElement("a",{key:"imgdownload",className:"results btn btn-info",href:e.result_imagezip_url},"Download images (ZIP)")):null!=e.imagerequest_task_id?e.imagerequest_finished?r.push(React.createElement("a",{key:"imgrequest",className:"btn btn-primary",href:e.imagerequest_url,onClick:t=>{this.props.setSingleTaskView(t,e.imagerequest_task_id,e.imagerequest_url)}},"Images ready")):r.push(React.createElement("a",{key:"imgrequest",className:"btn btn-warning",href:e.imagerequest_url,onClick:t=>{this.props.setSingleTaskView(t,e.imagerequest_task_id,e.imagerequest_url)}},"Images requested")):user_id==e.user_id&&r.push(React.createElement("button",{key:"imgrequest",className:"btn btn-info",onClick:()=>this.requestImages(),title:"Download FITS and JPEG images for up to the first 500 observations."},"Request ",e.use_reduced?"reduced":"diff"," images")))):null!=e.starttimestamp?r.push(React.createElement("div",{key:"status",style:{color:"red",fontStyle:"italic",marginTop:"1em"}},"Running (started ",this.state.timeelapsed," seconds ago)")):r.push(React.createElement("div",{key:"status",style:{fontStyle:"italic",marginTop:"1em"}},"Waiting (",e.queuepos," tasks ahead of this one)")),null!=e.finishtimestamp&&null==e.error_msg&&"FP"==e.request_type&&r.push(React.createElement(TaskPlot,{key:"plot",taskid:e.id,taskurl:e.url})),React.createElement("li",{key:"task-"+e.id,className:"task "+t,id:"task-"+e.id},r)}}class Pager extends React.PureComponent{constructor(e){super(e),this.state={},null!=this.props.previous&&(this.state.previous_cursor=new URL(this.props.previous).searchParams.get("cursor")),null!=this.props.next&&(this.state.next_cursor=new URL(this.props.next).searchParams.get("cursor"))}static getDerivedStateFromProps(e,t){var s={};return null!=e.previous&&(s.previous_cursor=new URL(e.previous).searchParams.get("cursor")),null!=e.next&&(s.next_cursor=new URL(e.next).searchParams.get("cursor")),s}render(){return console.log("Pager rendered"),null==this.props.taskcount?null:React.createElement("div",{id:"paginator",key:"paginator"},React.createElement("p",{key:"pagedescription"},"Showing tasks ",this.props.pagefirsttaskposition+1,"-",this.props.pagefirsttaskposition+this.props.pagetaskcount," of ",this.props.taskcount),React.createElement("ul",{key:"prevnext",className:"pager"},null!=this.props.previous?React.createElement("li",{key:"previous",className:"previous"},React.createElement("a",{onClick:()=>{this.props.updateCursor(this.state.previous_cursor)},style:{cursor:"pointer"}},"« Newer")):null,null!=this.props.next?React.createElement("li",{key:"next",className:"next"},React.createElement("a",{onClick:()=>{this.props.updateCursor(this.state.next_cursor)},style:{cursor:"pointer"}},"Older »")):null))}}class TaskPage extends React.Component{constructor(e){super(e),this.state={taskcount:null,results:null,scrollToTopAfterUpdate:!1,dataurl:window.location.href},this.newRequest=React.createRef(),this.setSingleTaskView=this.setSingleTaskView.bind(this),this.updateCursor=this.updateCursor.bind(this),this.fetchData=this.fetchData.bind(this)}filterclass(e,t){var s=new URL(t).searchParams.get("started");return null==e?null==s&&null==this.singleTaskViewTaskId(this.state.dataurl)?"btn-primary":"btn-link":"started"==e?"true"==s?"btn-primary":"btn-link":void 0}setFilter(e){console.log("changed filter to",e);var t=new URL(api_url_base);if(t.search="",null!=e&&t.searchParams.set(e,!0),t!=window.location.href){window.history.pushState({},document.title,t);var s={scrollToTopAfterUpdate:!0,dataurl:t};"started"==e&&null!=this.state.results&&(s.results=this.state.results.filter((e=>null!=e.starttimestamp)),0==s.results.length&&(s.results=null)),this.setState(s,(()=>{this.fetchData(!0)}))}}singleTaskViewTaskId(e){var t=e.toString().replace(api_url_base.toString(),"").split("/").filter((e=>0!=e.length));return 1!=t.length||isNaN(t[0])?null:parseInt(t[0])}setSingleTaskView(e,t,s){if(!(e.ctrlKey||e.metaKey||e.shiftKey)){e.preventDefault();var a=api_url_base+t+"/";window.history.pushState({},document.title,a),console.log("Task list changed to single task view for ",a.toString());var r=this.state.results.filter((e=>e.id==t));0==r.length&&(r=null),this.setState({results:r,scrollToTopAfterUpdate:!0,next:null,previous:null,pagefirsttaskposition:null,taskcount:null},(()=>{this.fetchData(!0)}))}}updateCursor(e){if(e!=new URL(window.location.href).searchParams.get("cursor")){console.log("Task list cursor changed to ",e);var t=new URL(window.location.href);null!=e?t.searchParams.set("cursor",e):t.searchParams.delete("cursor"),t.searchParams.delete("format"),window.history.pushState({},document.title,t),this.setState({scrollToTopAfterUpdate:!0},(()=>{this.fetchData(!0)}))}}fetchData(e){if(!document[hidden]&&user_is_active){this.setState({dataurl:window.location.href});var t=window.location.href in fetchcache;if(t?(console.log("using fetchcache before GET response",window.location.href),this.setState(t[window.location.href])):console.log("no fetchcache for",window.location.href),!api_request_active||e){api_request_active=!0;var s=window.location.href;console.log("Fetching task list from",s,"fetchcachematch",t),fetch(s,{headers:{Accept:"application/json","Content-Type":"application/json"}}).then((e=>(api_request_active=!1,200!=e.status&&console.log("Fetch recieved HTTP status ",e.status),404==e.status&&(window.history.pushState({},document.title,api_url_base),this.setState({scrollToTopAfterUpdate:!0},(()=>{this.fetchData(!0)}))),200==e.status?e.json():null))).catch((e=>{api_request_active=!1,console.log("HTTP request failed",e)})).then((e=>{var t=null;if(null!=e&&e.hasOwnProperty("results")?0==e.results.length&&null!=new URL(window.location.href).searchParams.get("cursor")?this.updateCursor(null):t=e:null!=e&&e.hasOwnProperty("id")&&(t={results:[e],next:null,previous:null,pagefirsttaskposition:null,taskcount:null}),null!=t){if(fetchcache[window.location.href]=t,s!=window.location.href)return void console.log("Not applying results from",s,"location.href",window.location.href);console.log("Applying results from",s),this.setState(t)}}))}else console.log("prevent overlapping GET requests")}}componentDidUpdate(){this.state.scrollToTopAfterUpdate&&(window.scrollTo(0,0),this.setState({scrollToTopAfterUpdate:!1}),window.dispatchEvent(new Event("resize")))}componentDidMount(){this.interval=setInterval((()=>this.fetchData(!1)),2500),this.fetchData(!0),this.newRequest.current.appendChild(document.getElementById("newrequestsource"))}componentWillUnmount(){clearInterval(this.interval)}render(){console.log("TaskPage rendered");var e=null!=this.singleTaskViewTaskId(this.state.dataurl),t=[];e?t.push(React.createElement("div",{key:"header",className:"page-header"},React.createElement("h1",null,"Task ",this.singleTaskViewTaskId(this.state.dataurl)))):t.push(React.createElement("div",{key:"header",className:"page-header"},React.createElement("h1",null,"Task Queue"))),(!e||null!=this.state.results&&this.state.results.length>0&&this.state.results[0].user_id==user_id)&&t.push(React.createElement("ul",{key:"filters",id:"taskfilters"},React.createElement("li",{key:"all"},React.createElement("a",{onClick:()=>this.setFilter(null),className:"btn "+this.filterclass(null,this.state.dataurl)},"All tasks")),React.createElement("li",{key:"started"},React.createElement("a",{onClick:()=>this.setFilter("started"),className:"btn "+this.filterclass("started",this.state.dataurl)},"Running/Finished"))));var s,a=e?{display:"none"}:null;if(t.push(React.createElement("div",{key:"newrequest",id:"newrequestcontainer",ref:this.newRequest,style:a})),null==this.state.results)s=React.createElement("p",{key:"message"},"Loading tasks...");else if(0==this.state.results.length)s=React.createElement("p",{key:"message"},"There are no tasks.");else{var r=null!=this.state.results?this.state.results.length:null;s=[React.createElement("ul",{key:"ultasklist",className:"tasks"},this.state.results.map((e=>React.createElement(Task,{key:e.id,taskdata:e,fetchData:this.fetchData,setSingleTaskView:this.setSingleTaskView})))),React.createElement(Pager,{key:"pager",previous:this.state.previous,next:this.state.next,pagefirsttaskposition:this.state.pagefirsttaskposition,pagetaskcount:r,taskcount:this.state.taskcount,updateCursor:this.updateCursor})]}return t.push(React.createElement("div",{key:"tasklist",id:"tasklist",className:e?"singletaskdetail":null},s)),t}}ReactDOM.render(React.createElement(TaskPage,{}),document.getElementById("taskpage"));
