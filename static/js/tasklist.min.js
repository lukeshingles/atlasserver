"use strict";import React from"react";import ReactDOM from"reactdom";import{NewRequest}from"newrequest";class TaskPlot extends React.PureComponent{constructor(props){super(props)}componentDidMount(){console.log("activating plot",this.props.taskid);const plot_url=new URL(this.props.taskurl);plot_url.pathname+="resultplotdata.js";plot_url.search="";$.ajax({url:plot_url,cache:true,dataType:"script"})}componentWillUnmount(){console.log("Unmounting plot for task ",this.props.taskid);delete jslimitsglobal["#plotforcedflux-task-"+this.props.taskid];delete jslcdataglobal["#plotforcedflux-task-"+this.props.taskid];delete jslabelsglobal["#plotforcedflux-task-"+this.props.taskid]}render(){return/*#__PURE__*/React.createElement("div",{key:"plot",id:"plotforcedflux-task-"+this.props.taskid,className:"plot",style:{width:"100%",height:"300px"}})}}export class Task extends React.Component{constructor(props){super(props);this.state={};this.state.updateTimeElapsed=this.updateTimeElapsed.bind(this);this.state.interval=null;this.state.timeelapsed=-1;this.state.httperror=""}deleteTask(){const li_id="#task-"+this.props.taskdata.id;// $(li_id).hide(300);
$(li_id).slideUp(200);setTimeout(()=>{// console.log('Starting delete of task ', this.props.taskdata.id);
$.ajax({headers:{"X-CSRFToken":getCookie("csrftoken")},url:this.props.taskdata.url,method:"delete",success:result=>{console.log("Deleted task ",this.props.taskdata.id);this.props.fetchData()},error:err=>{console.log("Failed to delete task ",this.props.taskdata.id,err);$("#task-"+this.props.taskdata.id).slideDown(100);this.props.fetchData()}})},200)}requestImages(){const request_image_url=new URL(this.props.taskdata.url);request_image_url.pathname+="requestimages";request_image_url.search="";fetch(request_image_url,{credentials:"same-origin",method:"GET",headers:{"X-CSRFToken":getCookie("csrftoken"),"Accept":"application/json","Content-Type":"application/json"}}).catch(error=>{console.log("requestImages HTTP request failed",error);this.setState({"httperror":"HTTP request failed."})}).then(response=>{if(response.status==200&&response.redirected){// console.log(response)
this.setState({"httperror":""});const newimgtask_id=parseInt(new URL(response.url).searchParams.get("newids"));newtaskids.push(newimgtask_id);console.log("requestimages created task",newimgtask_id);const new_page_url=new URL(response.url);new_page_url.searchParams.delete("newids");window.history.pushState({},document.title,new_page_url);this.props.fetchData(true)}else{response.json().then(data=>{console.log("requestImages: errors returned",data);this.setState({"httperror":"ERROR: "+data["error"]})})}})}static getDerivedStateFromProps(props,state){if(props.taskdata.starttimestamp!=null&&props.taskdata.finishtimestamp==null){if(state.interval==null){const starttime=new Date(props.taskdata.starttimestamp).getTime();const timeelapsed=(new Date().getTime()-starttime)/1000;return{"interval":setInterval(state.updateTimeElapsed,1000),"timeelapsed":timeelapsed.toFixed(0)}}}else if(state.interval!=null){return{"interval":null}}return null}componentDidMount(){// componentDidUpdate() {
this.updateTimeElapsed();if(newtaskids.includes(this.props.taskdata.id)){const li_id="#task-"+this.props.taskdata.id;console.log("showing new task",this.props.taskdata.id);$(li_id).hide();// $(li_id).show(600);
$(li_id).slideDown(200);newtaskids=newtaskids.filter(item=>{return item!==this.props.taskdata.id})}// this.interval = setInterval(() => {this.updateTimeElapsed()}, 1000);
}componentWillUnmount(){clearInterval(this.state.interval);// this.state.interval = null;
}updateTimeElapsed(){if(this.props.taskdata.starttimestamp!=null&&this.props.taskdata.finishtimestamp==null){const starttime=new Date(this.props.taskdata.starttimestamp).getTime();const timeelapsed=(new Date().getTime()-starttime)/1000;this.setState({"timeelapsed":timeelapsed.toFixed(0)})}else if(this.state.interval!=null){clearInterval(this.state.interval);this.setState({"interval":null})}}shouldComponentUpdate(nextProps,nextState){if(nextState.httperror!=this.state.httperror){return true}if(nextProps.taskdata.starttimestamp!=null&&nextProps.taskdata.finishtimestamp==null){return true}if(JSON.stringify(nextProps)!=JSON.stringify(this.props)){return true}return false}render(){const task=this.props.taskdata;let statusclass="none";let buttontext="none";if(task.finishtimestamp!=null){statusclass="finished";buttontext="Delete"}else if(task.starttimestamp!=null){statusclass="queued started";buttontext="Cancel"}else{statusclass="queued notstarted";buttontext="Cancel"}console.log("Task "+task.id+" rendered");let delbutton=null;if(task.user_id==user_id){delbutton=/*#__PURE__*/React.createElement("button",{className:"btn btn-sm btn-danger",onClick:()=>this.deleteTask()},buttontext)}let taskbox=[/*#__PURE__*/React.createElement("div",{key:"rightside",className:"rightside"},delbutton,/*#__PURE__*/React.createElement("img",{src:task.previewimage_url,style:{display:"block",marginTop:"1em",marginLeft:"1em"}}))];taskbox.push(/*#__PURE__*/React.createElement("div",{key:"tasknum"},/*#__PURE__*/React.createElement("a",{key:"tasklink",href:task.url,onClick:e=>{this.props.setSingleTaskView(e,task.id,task.url)}},"Task ",task.id)));if(task.parent_task_url){taskbox.push(/*#__PURE__*/React.createElement("p",{key:"imgrequest"},"Image request for ",/*#__PURE__*/React.createElement("a",{key:"parent_task_link",href:task.parent_task_url,onClick:e=>{this.props.setSingleTaskView(e,task.parent_task_id,task.parent_task_url)}},"Task ",task.parent_task_id)))}else if(task.parent_task_id){taskbox.push(/*#__PURE__*/React.createElement("p",{key:"imgrequest"},"Image request for Task ",task.parent_task_id," (deleted)"))}else if(task.request_type=="IMGZIP"){taskbox.push(/*#__PURE__*/React.createElement("p",{key:"imgrequest"},"Image request"))}if(task.request_type=="IMGZIP"){const imagetype=task.use_reduced?"reduced":"difference";taskbox.push(/*#__PURE__*/React.createElement("p",{key:"imgrequestnote"},"Up to the first 1000 ",imagetype," images will be retrieved. The image request and download link may expire after one week."))}if(task.user_id!=user_id){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"user"},"User: ",task.username))}if(task.comment!=null&&task.comment!=""){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"comment"},"Comment: ",/*#__PURE__*/React.createElement("b",null,task.comment)))}if(task.mpc_name!=null&&task.mpc_name!=""){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"target"},"MPC Object: ",task.mpc_name))}else{let radecepoch="";if(task.radec_epoch_year!=null){radecepoch=/*#__PURE__*/React.createElement("span",null,"(epoch ",task.radec_epoch_year,") ")}taskbox.push(/*#__PURE__*/React.createElement("div",{key:"target"},"RA Dec: ",radecepoch,task.ra," ",task.dec));if(task.propermotion_ra>0||task.propermotion_dec>0){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"propermotion"},"Proper motion [mas/yr]: ",task.propermotion_ra," ",task.propermotion_dec))}}if(task.request_type=="SSOSTACK"){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"imgtype"},"Image: Stacked"))}else{taskbox.push(/*#__PURE__*/React.createElement("div",{key:"imgtype"},"Images: ",task.use_reduced?"Reduced":"Difference"))}if(task.mjd_min!=null||task.mjd_max!=null){const mjdmin=task.mjd_min!=null?task.mjd_min:"0";const mjdmax=task.mjd_max!=null?task.mjd_max:"\u221E";taskbox.push(/*#__PURE__*/React.createElement("div",{key:"mjdrange"},"MJD request: [",mjdmin,", ",mjdmax,"]"))}taskbox.push(/*#__PURE__*/React.createElement("div",{key:"queuetime"},"Queued at ",new Date(task.timestamp).toLocaleString()));if(task.finishtimestamp!=null){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"status"},"Finished at ",new Date(task.finishtimestamp).toLocaleString()));if(task.error_msg!=null){taskbox.push(/*#__PURE__*/React.createElement("p",{key:"error_msg",style:{color:"black",fontWeight:"bold",marginTop:"1em"}},"Error: ",task.error_msg))}else{if(task.request_type=="FP"){taskbox.push(/*#__PURE__*/React.createElement("a",{key:"datalink",className:"results btn btn-info getdata",href:task.result_url,target:"_blank"},"Data"));taskbox.push(/*#__PURE__*/React.createElement("a",{key:"pdflink",className:"results btn btn-info getpdf",href:task.pdfplot_url,target:"_blank"},"PDF"))}else if(task.request_type=="SSOSTACK"){taskbox.push(/*#__PURE__*/React.createElement("a",{key:"datalink",className:"results btn btn-info getdata",href:task.result_url,target:"_blank"},"Data"));if(task.result_imagestack_url!=null){taskbox.push(/*#__PURE__*/React.createElement("a",{key:"imgdownload",className:"results btn btn-info",href:task.result_imagestack_url,target:"_blank"},"Stacked image (FITS)"))}else{taskbox.push(/*#__PURE__*/React.createElement("p",null,"The download link has expired. Delete this task and request again if necessary."))}}if(task.request_type=="IMGZIP"){if(task.result_imagezip_url!=null){taskbox.push(/*#__PURE__*/React.createElement("a",{key:"imgdownload",className:"results btn btn-info",href:task.result_imagezip_url},"Download images (ZIP)"))}else{taskbox.push(/*#__PURE__*/React.createElement("p",null,"The download link has expired. Delete this task and request again if necessary."))}}else if(task.imagerequest_task_id!=null){if(task.imagerequest_finished){taskbox.push(/*#__PURE__*/React.createElement("a",{key:"imgrequest",className:"btn btn-primary",href:task.imagerequest_url,onClick:e=>{this.props.setSingleTaskView(e,task.imagerequest_task_id,task.imagerequest_url)}},"Images retrieved"))}else{taskbox.push(/*#__PURE__*/React.createElement("a",{key:"imgrequest",className:"btn btn-warning",href:task.imagerequest_url,onClick:e=>{this.props.setSingleTaskView(e,task.imagerequest_task_id,task.imagerequest_url)}},"Images requested"))}}else if(task.request_type=="FP"&&user_id==task.user_id){taskbox.push(/*#__PURE__*/React.createElement("button",{key:"imgrequest",className:"btn btn-info",onClick:()=>this.requestImages(),title:"Download FITS and JPEG images for up to the first 1000 observations."},"Request ",task.use_reduced?"reduced":"diff"," images"))}}}else if(task.starttimestamp!=null){taskbox.push(/*#__PURE__*/React.createElement("div",{key:"status",style:{color:"red",fontStyle:"italic",marginTop:"1em"}},"Running (started ",this.state.timeelapsed," seconds ago)"))}else{taskbox.push(/*#__PURE__*/React.createElement("div",{key:"status",style:{fontStyle:"italic",marginTop:"1em"}},"Waiting (",task.queuepos," tasks ahead of this one)"))}if(this.state.httperror!=""){taskbox.push(/*#__PURE__*/React.createElement("p",{key:"httperror",style:{"color":"red"}},this.state.httperror))}if(task.finishtimestamp!=null&&task.error_msg==null&&task.request_type=="FP"&&!this.props.hidePlot){taskbox.push(/*#__PURE__*/React.createElement(TaskPlot,{key:"plot",taskid:task.id,taskurl:task.url}))}return/*#__PURE__*/React.createElement("li",{key:"task-"+task.id,className:"task "+statusclass,id:"task-"+task.id},taskbox)}}let tasklist_api_request_active=false;const tasklist_fetchcache=[];let tasklist_api_error="";class Pager extends React.PureComponent{constructor(props){super(props);this.state={};if(this.props.previous!=null){this.state.previous_cursor=new URL(this.props.previous).searchParams.get("cursor")}if(this.props.next!=null){this.state.next_cursor=new URL(this.props.next).searchParams.get("cursor")}}// componentWillReceiveProps(nextProps) {
//   if (JSON.stringify(nextProps) != JSON.stringify(this.state))
//   {
//     this.setState(nextProps);
//     console.log('Pager changed');
//   }
// }
static getDerivedStateFromProps(props,state){const statechanges={};if(props.previous!=null){statechanges.previous_cursor=new URL(props.previous).searchParams.get("cursor")}if(props.next!=null){statechanges.next_cursor=new URL(props.next).searchParams.get("cursor")}return statechanges}render(){console.log("Pager rendered");if(this.props.taskcount==null){return null}else{return/*#__PURE__*/React.createElement("div",{id:"paginator",key:"paginator"},/*#__PURE__*/React.createElement("p",{key:"pagedescription"},"Showing tasks ",this.props.pagefirsttaskposition+1,"-",this.props.pagefirsttaskposition+this.props.pagetaskcount," of ",this.props.taskcount),/*#__PURE__*/React.createElement("ul",{key:"prevnext",className:"pager"},this.props.previous!=null?/*#__PURE__*/React.createElement("li",{key:"previous",className:"previous"},/*#__PURE__*/React.createElement("a",{onClick:()=>{this.props.updateCursor(this.state.previous_cursor)},style:{cursor:"pointer"}},"\xAB Newer")):null,this.props.next!=null?/*#__PURE__*/React.createElement("li",{key:"next",className:"next"},/*#__PURE__*/React.createElement("a",{onClick:()=>{this.props.updateCursor(this.state.next_cursor)},style:{cursor:"pointer"}},"Older \xBB")):null))}}}export class TaskPage extends React.Component{constructor(props){super(props);this.state={taskcount:null,results:null,scrollToTopAfterUpdate:false,dataurl:window.location.href,fetchtimeelapsed:null};this.newRequest=/*#__PURE__*/React.createRef();this.setSingleTaskView=this.setSingleTaskView.bind(this);this.updateCursor=this.updateCursor.bind(this);this.fetchData=this.fetchData.bind(this)}filterclass(filtername,strurl){// var page_url = new URL(window.location.href);
const page_url=new URL(strurl);const started=page_url.searchParams.get("started");if(filtername==null){if(started==null&&this.singleTaskViewTaskId(this.state.dataurl)==null){return"btn-primary"}else{return"btn-link"}}else if(filtername=="started"){if(started=="true"){return"btn-primary"}else{return"btn-link"}}}setFilter(filtername){console.log("changed filter to",filtername);const new_page_url=new URL(api_url_base);new_page_url.search="";if(filtername!=null){new_page_url.searchParams.set(filtername,true)}if(new_page_url!=window.location.href){window.history.pushState({},document.title,new_page_url);const statechanges={"scrollToTopAfterUpdate":true,dataurl:new_page_url};if(filtername=="started"&&this.state.results!=null){statechanges["results"]=this.state.results.filter(task=>{return task.starttimestamp!=null});if(statechanges["results"].length==0){// prevent flash of "there are no results" for empty ([] non-null) results list
statechanges["results"]=null}}this.setState(statechanges,()=>{this.fetchData(true)})}}singleTaskViewTaskId(strurl){const pathext=strurl.toString().replace(api_url_base.toString(),"").split("/").filter(el=>{return el.length!=0});if(pathext.length==1&&!isNaN(pathext[0])){return parseInt(pathext[0])}else{return null}}setSingleTaskView(event,task_id,task_url){if(event.ctrlKey||event.metaKey||event.shiftKey){return;// let the browser deal with the click natively
}event.preventDefault();const new_page_url=api_url_base+task_id+"/";window.history.pushState({},document.title,new_page_url);console.log("Task list changed to single task view for ",new_page_url.toString());let newresults=this.state.results.filter(task=>{return task.id==task_id});if(newresults.length==0){newresults=null;// prevent flash of "there are no results" for empty (non-null) results list
}this.setState({results:newresults,scrollToTopAfterUpdate:true,next:null,previous:null,pagefirsttaskposition:null,taskcount:null},()=>{this.fetchData(true)})}updateCursor(new_cursor){if(new_cursor==new URL(window.location.href).searchParams.get("cursor")){return}console.log("Task list cursor changed to ",new_cursor);const new_page_url=new URL(window.location.href);if(new_cursor!=null){new_page_url.searchParams.set("cursor",new_cursor)}else{new_page_url.searchParams.delete("cursor")}new_page_url.searchParams.delete("format");window.history.pushState({},document.title,new_page_url);this.setState({scrollToTopAfterUpdate:true},()=>{this.fetchData(true)})}fetchData(usertriggered){if(document[hidden]||!user_is_active){return}this.setState({dataurl:window.location.href});// start by applying a cached version if we have it
// then send out an HTTP request and update when available
if(usertriggered){const tasklist_fetchcachematch=(window.location.href in tasklist_fetchcache);if(tasklist_fetchcachematch){console.log("using tasklist_fetchcache before GET response",window.location.href);this.setState(tasklist_fetchcache[window.location.href])}else{console.log("no tasklist_fetchcache for",window.location.href)}}if(tasklist_api_request_active&&!usertriggered){console.log("prevent overlapping GET requests");return}tasklist_api_request_active=true;const get_url=window.location.href;console.log("Fetching task list from",get_url);fetch(get_url,{credentials:"same-origin",method:"GET",headers:{"X-CSRFToken":getCookie("csrftoken"),"Accept":"application/json","Content-Type":"application/json"},redirect:"manual"}).then(response=>{tasklist_api_error="";tasklist_api_request_active=false;// etag = response.headers.get('ETag');
if(response.type==="opaqueredirect"){// redirect to login page
window.location.href=response.url;console.log("Fetch got a redirection to ",response.url)}else{if(response.status!=200){console.log("Fetch received HTTP status ",response.status)}if(response.status==404){window.history.pushState({},document.title,api_url_base);this.setState({scrollToTopAfterUpdate:true},()=>{this.fetchData(true)})}if(response.status==200){return response.json()}}return null}).catch(error=>{tasklist_api_request_active=false;console.log("Get task list HTTP request failed",error);tasklist_api_error="Connection error"}).then(data=>{let statechanges=null;if(data!=null&&data.hasOwnProperty("results")){if(data.results.length==0&&new URL(window.location.href).searchParams.get("cursor")!=null){// page is empty. redirect to main page
this.updateCursor(null)}else{statechanges=data}}else if(data!=null&&data.hasOwnProperty("id")){// single task view doesn't put task data inside 'results' list,
// so we create a single-item results list
statechanges={results:[data],next:null,previous:null,pagefirsttaskposition:null,taskcount:null}}if(statechanges!=null){statechanges["tasklist_last_fetch_time"]=new Date;tasklist_fetchcache[window.location.href]=statechanges;if(get_url==window.location.href){console.log("Applying results from",get_url);if(usertriggered){statechanges["scrollToTopAfterUpdate"]=true}this.setState(statechanges)}else{console.log("Not applying results from",get_url,"location.href",window.location.href);return}}})}componentDidUpdate(){if(this.state.scrollToTopAfterUpdate){this.setState({scrollToTopAfterUpdate:false});window.scrollTo(0,0);window.dispatchEvent(new Event("resize"))}}componentDidMount(){this.fetchinterval=setInterval(()=>this.fetchData(false),2000);this.fetchData(true)}componentWillUnmount(){clearInterval(this.fetchinterval)}render(){// console.log('TaskPage rendered');
const singletaskmode=this.singleTaskViewTaskId(this.state.dataurl)!=null;let pagehtml=[];if(!singletaskmode){pagehtml.push(/*#__PURE__*/React.createElement("div",{key:"header",className:"page-header"},/*#__PURE__*/React.createElement("h1",null,"Task Queue")))}else{pagehtml.push(/*#__PURE__*/React.createElement("div",{key:"header",className:"page-header"},/*#__PURE__*/React.createElement("h1",null,"Task ",this.singleTaskViewTaskId(this.state.dataurl))))}if(!singletaskmode||this.state.results!=null&&this.state.results.length>0&&this.state.results[0].user_id==user_id){pagehtml.push(/*#__PURE__*/React.createElement("ul",{key:"filters",id:"taskfilters"},/*#__PURE__*/React.createElement("li",{key:"all"},/*#__PURE__*/React.createElement("a",{onClick:()=>this.setFilter(null),className:"btn "+this.filterclass(null,this.state.dataurl)},"All tasks")),/*#__PURE__*/React.createElement("li",{key:"started"},/*#__PURE__*/React.createElement("a",{onClick:()=>this.setFilter("started"),className:"btn "+this.filterclass("started",this.state.dataurl)},"Running/Finished"))))}if(this.state.tasklist_last_fetch_time!=null){pagehtml.push(/*#__PURE__*/React.createElement("p",{key:"tasklistfetchstatus",id:"tasklistfetchstatus"},"Last updated: ",this.state.tasklist_last_fetch_time.toLocaleString()," ",/*#__PURE__*/React.createElement("span",{className:"errors"},tasklist_api_error)))}if(!singletaskmode){const allow_stack_rock=new URL(this.state.dataurl).searchParams.get("allow_stack_rock")=="true";pagehtml.push(/*#__PURE__*/React.createElement(NewRequest,{key:"newrequest",fetchData:this.fetchData,allow_stack_rock:allow_stack_rock}))}let tasklist;if(this.state.results==null){tasklist=/*#__PURE__*/React.createElement("p",{key:"message"},"Loading tasks...")}else if(this.state.results.length==0){tasklist=/*#__PURE__*/React.createElement("p",{key:"message"},"There are no tasks.")}else{const pagetaskcount=this.state.results!=null?this.state.results.length:null;tasklist=[/*#__PURE__*/React.createElement("ul",{key:"ultasklist",className:"tasks"},this.state.results.map(task=>/*#__PURE__*/React.createElement(Task,{key:task.id,taskdata:task,fetchData:this.fetchData,setSingleTaskView:this.setSingleTaskView,hidePlot:pagetaskcount>10}))),/*#__PURE__*/React.createElement(Pager,{key:"pager",previous:this.state.previous,next:this.state.next,pagefirsttaskposition:this.state.pagefirsttaskposition,pagetaskcount:pagetaskcount,taskcount:this.state.taskcount,updateCursor:this.updateCursor})]}pagehtml.push(/*#__PURE__*/React.createElement("div",{key:"tasklist",id:"tasklist",className:singletaskmode?"singletaskdetail":null},tasklist));return pagehtml}}const container=document.getElementById("taskpage");const root=ReactDOM.createRoot(container);root.render(/*#__PURE__*/React.createElement(TaskPage,null));

